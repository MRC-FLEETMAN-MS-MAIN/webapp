#  Provisions a new Webserver

- hosts: localhost
  gather_facts: yes
  vars: 
     region: us-east-1
     keypair_name: microservice
     instance_type: t2.nano
     image_name: ami-0c94855ba95c71c99
     live_ip_address: 34.195.41.137
  
  tasks:

    - name: Set up variables for third play ( as a part of Blue/Green deployment) 
      set_fact:
          region: "{{ region }}"
          live_ip_address: "{{ live_ip_address }}"

    
    - name: Setup security group
      ec2_group:
        name: http-server
        description: Security rules for HTTP Server
        region: "{{ region }}"
        rules_egress:
           - proto: tcp
             from_port: 0
             to_port: 65535
             cidr_ip: 0.0.0.0/0
        rules:
           - proto: tcp
             from_port: 8080
             to_port: 8080
             cidr_ip: 0.0.0.0/0
           
           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0

    - name: Provision an instance
      ec2:
        key_name: "{{ keypair_name }}"
        group: http-server
        instance_type: "{{ instance_type }}"
        image: "{{ image_name }}"
        wait: true
        region: "{{region}}"
        exact_count: 1 
        count_tag:
          Name: Web_Server
          Deploy: New
        instance_tags:
          Name: Web_Server
          Deploy: Blue
      register: ec2

    - name: Add all instance public IPs to host group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts
      with_items: "{{ec2.instances}}"

    - name: Wait for SSH Server to start responding
      wait_for:
              port: 22
              host: "{{item.public_ip}}"
              state: started
      with_items: "{{ec2.instances}}"

- hosts:  tag_Deploy_Blue ec2hosts
  tasks:
  - name: upgrade all packages
    yum: name=* state=latest
    become: true
  
  - name: Install JDK
    yum:
       name: java-1.8.0-openjdk-devel
       state: latest
    become: true

  - name: Use Java8 for Runtime Java
    alternatives:
       name: java
       path: /usr/lib/jvm/jre-1.8.0-openjdk/bin/java
       link: /usr/bin/java
    become: true

  - name: Send the docker file across to the new instance
    copy: 
       src: dockerfile
       dest: /home/ec2-user/webapp/target/
       mode: 0700
       
       
  - name: Send the deployment across to the new instance
    copy: 
       src: target/msbuildtry-0.0.1-SNAPSHOT.war
       dest: /home/ec2-user/webapp/target/
       mode: 0700
   
  - name: Remove exisiting docker files
    yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: removed
    become: yes

  - name: Install Docker
    yum:
        name:
          - docker
    become: yes

  - name: "Starting and Enabling Docker service"
    service:
        name: docker
        state: started
        enabled: yes
    become: yes


  - name: Add user ec2-user to docker group
    user:
         name: ec2-user
         groups: docker
         append: yes
    become: yes




  - name: Build the Docker image
    command: docker build --tag webapp:1.0 .
    args:
            chdir: webapp/target/

    become: yes


  - name: Run the Docker container
    command: docker run --restart always --publish 8080:8080 --detach --name bb webapp:1.0
    become: yes



# Series of steps to implement a Green -> Blue switchover

- hosts: localhost
  tasks:
  - name: Gather facts about the new blue server
    ec2_instance_info:
       filters:
          "tag:Deploy": Blue
          "tag:Name": Web_Server
          instance-state-name: running
       region: "{{ region }}"
    register: new_server
    
   
  -  debug: msg="{{ new_server.instances[0].tags.Name}}"

  - name: Get the id of the old, soon to be dead, green server
    ec2_instance_info:
       filters:
          "tag:Deploy": Green
          "tag:Name": Web_Server
          instance-state-name: running
       region: "{{ region }}"
    register: old_green

  - name: Deallocate the EIP
    ec2_eip:
       instance_id: "{{ old_green.instance_id[0] }}"
       ip: "{{ live_ip_address }}"
       state: absent
       region: "{{ region }}"
    when: old_green.instance_id[0] is defined

  - name: Allocate the EIP to the new instance
    ec2_eip:
      instance_id: "{{ new_server.instance_id[0] }}"
      ip: "{{ live_ip_address }}"
      region: "{{ region }}"

  - name: Terminate the existing Green Server.
    ec2:
      exact_count: 0
      count_tag:
        Deploy: Green
        Name: Web_Server
      region: "{{ region }}"
      image: notneeded

  - name: All done, set new server to Green status
    ec2_tag:
       region: "{{ region }}"
       resource: "{{ new_server.instance_id[0]}}"
       tags:
          Deploy: Green
       state: present

  - name: Remove Blue Tag
    ec2_tag:
       region: "{{ region }}"
       resource: "{{ new_server.instance_id[0] }}"
       tags:
          Deploy: Blue
       state: absent
       



#  - name: Build a link to the executable so it becomes a service
#    file:
#            src: /home/ec2-user/webapp/target/msbuildtry-0.0.1-SNAPSHOT.war
#            dest: /etc/init.d/microservice
#            state: link
#    become: true

#  - name: Install Config Server as a startup service
#    service:
#            name: webapp
#            state: started
#            enabled: yes
#    become: true

#  - name: Wait for the new webserver to begin responding
#    wait_for:
#            host: localhost
#            port: 8080
#            state: started
